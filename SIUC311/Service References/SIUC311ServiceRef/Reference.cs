//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace SIUC311.SIUC311ServiceRef {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReportObject", Namespace="http://schemas.datacontract.org/2004/07/SIUC311Services")]
    public partial class ReportObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ReportAccuracyField;
        
        private string ReportAuthorField;
        
        private string ReportDescriptionField;
        
        private string ReportDirectionField;
        
        private int ReportIdField;
        
        private string ReportLatitudeField;
        
        private string ReportLocationField;
        
        private string ReportLongitudeField;
        
        private System.DateTime ReportTimeField;
        
        private string ReportTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportAccuracy {
            get {
                return this.ReportAccuracyField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportAccuracyField, value) != true)) {
                    this.ReportAccuracyField = value;
                    this.RaisePropertyChanged("ReportAccuracy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportAuthor {
            get {
                return this.ReportAuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportAuthorField, value) != true)) {
                    this.ReportAuthorField = value;
                    this.RaisePropertyChanged("ReportAuthor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportDescription {
            get {
                return this.ReportDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportDescriptionField, value) != true)) {
                    this.ReportDescriptionField = value;
                    this.RaisePropertyChanged("ReportDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportDirection {
            get {
                return this.ReportDirectionField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportDirectionField, value) != true)) {
                    this.ReportDirectionField = value;
                    this.RaisePropertyChanged("ReportDirection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReportId {
            get {
                return this.ReportIdField;
            }
            set {
                if ((this.ReportIdField.Equals(value) != true)) {
                    this.ReportIdField = value;
                    this.RaisePropertyChanged("ReportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportLatitude {
            get {
                return this.ReportLatitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportLatitudeField, value) != true)) {
                    this.ReportLatitudeField = value;
                    this.RaisePropertyChanged("ReportLatitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportLocation {
            get {
                return this.ReportLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportLocationField, value) != true)) {
                    this.ReportLocationField = value;
                    this.RaisePropertyChanged("ReportLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportLongitude {
            get {
                return this.ReportLongitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportLongitudeField, value) != true)) {
                    this.ReportLongitudeField = value;
                    this.RaisePropertyChanged("ReportLongitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReportTime {
            get {
                return this.ReportTimeField;
            }
            set {
                if ((this.ReportTimeField.Equals(value) != true)) {
                    this.ReportTimeField = value;
                    this.RaisePropertyChanged("ReportTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportType {
            get {
                return this.ReportTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportTypeField, value) != true)) {
                    this.ReportTypeField = value;
                    this.RaisePropertyChanged("ReportType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhotoObject", Namespace="http://schemas.datacontract.org/2004/07/SIUC311Services")]
    public partial class PhotoObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ReportForeignKeyField;
        
        private int ReportIdField;
        
        private byte[] ReportPhotoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReportForeignKey {
            get {
                return this.ReportForeignKeyField;
            }
            set {
                if ((this.ReportForeignKeyField.Equals(value) != true)) {
                    this.ReportForeignKeyField = value;
                    this.RaisePropertyChanged("ReportForeignKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReportId {
            get {
                return this.ReportIdField;
            }
            set {
                if ((this.ReportIdField.Equals(value) != true)) {
                    this.ReportIdField = value;
                    this.RaisePropertyChanged("ReportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ReportPhoto {
            get {
                return this.ReportPhotoField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportPhotoField, value) != true)) {
                    this.ReportPhotoField = value;
                    this.RaisePropertyChanged("ReportPhoto");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReportManagement", Namespace="http://schemas.datacontract.org/2004/07/SIUC311Services")]
    public partial class ReportManagement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ReportForeignKeyField;
        
        private int ReportFrequencyField;
        
        private int ReportIdField;
        
        private string ReportPriorityField;
        
        private string ReportStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReportForeignKey {
            get {
                return this.ReportForeignKeyField;
            }
            set {
                if ((this.ReportForeignKeyField.Equals(value) != true)) {
                    this.ReportForeignKeyField = value;
                    this.RaisePropertyChanged("ReportForeignKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReportFrequency {
            get {
                return this.ReportFrequencyField;
            }
            set {
                if ((this.ReportFrequencyField.Equals(value) != true)) {
                    this.ReportFrequencyField = value;
                    this.RaisePropertyChanged("ReportFrequency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReportId {
            get {
                return this.ReportIdField;
            }
            set {
                if ((this.ReportIdField.Equals(value) != true)) {
                    this.ReportIdField = value;
                    this.RaisePropertyChanged("ReportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportPriority {
            get {
                return this.ReportPriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportPriorityField, value) != true)) {
                    this.ReportPriorityField = value;
                    this.RaisePropertyChanged("ReportPriority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportStatus {
            get {
                return this.ReportStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportStatusField, value) != true)) {
                    this.ReportStatusField = value;
                    this.RaisePropertyChanged("ReportStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SIUC311ServiceRef.I311Service")]
    public interface I311Service {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/BeginSession", ReplyAction="http://tempuri.org/I311Service/BeginSessionResponse")]
        System.Threading.Tasks.Task<string> BeginSessionAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/CheckPermissions", ReplyAction="http://tempuri.org/I311Service/CheckPermissionsResponse")]
        System.Threading.Tasks.Task<bool> CheckPermissionsAsync(string session_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/IsSessionAlive", ReplyAction="http://tempuri.org/I311Service/IsSessionAliveResponse")]
        System.Threading.Tasks.Task<bool> IsSessionAliveAsync(string session_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/EndSession", ReplyAction="http://tempuri.org/I311Service/EndSessionResponse")]
        System.Threading.Tasks.Task<bool> EndSessionAsync(string session_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/InsertReport", ReplyAction="http://tempuri.org/I311Service/InsertReportResponse")]
        System.Threading.Tasks.Task<bool> InsertReportAsync(string session_id, SIUC311.SIUC311ServiceRef.ReportObject RepInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/InsertPhoto", ReplyAction="http://tempuri.org/I311Service/InsertPhotoResponse")]
        System.Threading.Tasks.Task<bool> InsertPhotoAsync(string session_id, SIUC311.SIUC311ServiceRef.PhotoObject PhoInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/RemoveReport", ReplyAction="http://tempuri.org/I311Service/RemoveReportResponse")]
        System.Threading.Tasks.Task<bool> RemoveReportAsync(string name, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/GetAllReports", ReplyAction="http://tempuri.org/I311Service/GetAllReportsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SIUC311.SIUC311ServiceRef.ReportObject>> GetAllReportsAsync(string session_id, bool isNew, int dir, bool paged, System.Collections.ObjectModel.ObservableCollection<int> sort_select);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/GetMyReports", ReplyAction="http://tempuri.org/I311Service/GetMyReportsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SIUC311.SIUC311ServiceRef.ReportObject>> GetMyReportsAsync(string session_id, bool isNew, int dir, bool paged, System.Collections.ObjectModel.ObservableCollection<int> sort_select);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/GetAllReportsByType", ReplyAction="http://tempuri.org/I311Service/GetAllReportsByTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SIUC311.SIUC311ServiceRef.ReportObject>> GetAllReportsByTypeAsync(string type, string session_id, bool isNew, int dir, bool paged, System.Collections.ObjectModel.ObservableCollection<int> sort_select);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/GetMyReportsByType", ReplyAction="http://tempuri.org/I311Service/GetMyReportsByTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SIUC311.SIUC311ServiceRef.ReportObject>> GetMyReportsByTypeAsync(string type, string session_id, bool isNew, int dir, bool paged, System.Collections.ObjectModel.ObservableCollection<int> sort_select);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/GetPagingState", ReplyAction="http://tempuri.org/I311Service/GetPagingStateResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> GetPagingStateAsync(string session_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/GetPhoto", ReplyAction="http://tempuri.org/I311Service/GetPhotoResponse")]
        System.Threading.Tasks.Task<SIUC311.SIUC311ServiceRef.PhotoObject> GetPhotoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/GetStatus", ReplyAction="http://tempuri.org/I311Service/GetStatusResponse")]
        System.Threading.Tasks.Task<string> GetStatusAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/GetReportManagement", ReplyAction="http://tempuri.org/I311Service/GetReportManagementResponse")]
        System.Threading.Tasks.Task<SIUC311.SIUC311ServiceRef.ReportManagement> GetReportManagementAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/CloseReport", ReplyAction="http://tempuri.org/I311Service/CloseReportResponse")]
        System.Threading.Tasks.Task<bool> CloseReportAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/OpenReport", ReplyAction="http://tempuri.org/I311Service/OpenReportResponse")]
        System.Threading.Tasks.Task<bool> OpenReportAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/ElevateReport", ReplyAction="http://tempuri.org/I311Service/ElevateReportResponse")]
        System.Threading.Tasks.Task<bool> ElevateReportAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/I311Service/ClaimReport", ReplyAction="http://tempuri.org/I311Service/ClaimReportResponse")]
        System.Threading.Tasks.Task<bool> ClaimReportAsync(int id, string admin);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface I311ServiceChannel : SIUC311.SIUC311ServiceRef.I311Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class I311ServiceClient : System.ServiceModel.ClientBase<SIUC311.SIUC311ServiceRef.I311Service>, SIUC311.SIUC311ServiceRef.I311Service {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public I311ServiceClient() : 
                base(I311ServiceClient.GetDefaultBinding(), I311ServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_I311Service.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public I311ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(I311ServiceClient.GetBindingForEndpoint(endpointConfiguration), I311ServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public I311ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(I311ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public I311ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(I311ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public I311ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> BeginSessionAsync(string name) {
            return base.Channel.BeginSessionAsync(name);
        }
        
        public System.Threading.Tasks.Task<bool> CheckPermissionsAsync(string session_id) {
            return base.Channel.CheckPermissionsAsync(session_id);
        }
        
        public System.Threading.Tasks.Task<bool> IsSessionAliveAsync(string session_id) {
            return base.Channel.IsSessionAliveAsync(session_id);
        }
        
        public System.Threading.Tasks.Task<bool> EndSessionAsync(string session_id) {
            return base.Channel.EndSessionAsync(session_id);
        }
        
        public System.Threading.Tasks.Task<bool> InsertReportAsync(string session_id, SIUC311.SIUC311ServiceRef.ReportObject RepInsert) {
            return base.Channel.InsertReportAsync(session_id, RepInsert);
        }
        
        public System.Threading.Tasks.Task<bool> InsertPhotoAsync(string session_id, SIUC311.SIUC311ServiceRef.PhotoObject PhoInsert) {
            return base.Channel.InsertPhotoAsync(session_id, PhoInsert);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveReportAsync(string name, int id) {
            return base.Channel.RemoveReportAsync(name, id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SIUC311.SIUC311ServiceRef.ReportObject>> GetAllReportsAsync(string session_id, bool isNew, int dir, bool paged, System.Collections.ObjectModel.ObservableCollection<int> sort_select) {
            return base.Channel.GetAllReportsAsync(session_id, isNew, dir, paged, sort_select);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SIUC311.SIUC311ServiceRef.ReportObject>> GetMyReportsAsync(string session_id, bool isNew, int dir, bool paged, System.Collections.ObjectModel.ObservableCollection<int> sort_select) {
            return base.Channel.GetMyReportsAsync(session_id, isNew, dir, paged, sort_select);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SIUC311.SIUC311ServiceRef.ReportObject>> GetAllReportsByTypeAsync(string type, string session_id, bool isNew, int dir, bool paged, System.Collections.ObjectModel.ObservableCollection<int> sort_select) {
            return base.Channel.GetAllReportsByTypeAsync(type, session_id, isNew, dir, paged, sort_select);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SIUC311.SIUC311ServiceRef.ReportObject>> GetMyReportsByTypeAsync(string type, string session_id, bool isNew, int dir, bool paged, System.Collections.ObjectModel.ObservableCollection<int> sort_select) {
            return base.Channel.GetMyReportsByTypeAsync(type, session_id, isNew, dir, paged, sort_select);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> GetPagingStateAsync(string session_id) {
            return base.Channel.GetPagingStateAsync(session_id);
        }
        
        public System.Threading.Tasks.Task<SIUC311.SIUC311ServiceRef.PhotoObject> GetPhotoAsync(int id) {
            return base.Channel.GetPhotoAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> GetStatusAsync(int id) {
            return base.Channel.GetStatusAsync(id);
        }
        
        public System.Threading.Tasks.Task<SIUC311.SIUC311ServiceRef.ReportManagement> GetReportManagementAsync(int id) {
            return base.Channel.GetReportManagementAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> CloseReportAsync(int id) {
            return base.Channel.CloseReportAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> OpenReportAsync(int id) {
            return base.Channel.OpenReportAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> ElevateReportAsync(int id) {
            return base.Channel.ElevateReportAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> ClaimReportAsync(int id, string admin) {
            return base.Channel.ClaimReportAsync(id, admin);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_I311Service)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_I311Service)) {
                return new System.ServiceModel.EndpointAddress("http://it-appdev1.ad.siu.edu/SIUC311Services/311Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return I311ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_I311Service);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return I311ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_I311Service);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_I311Service,
        }
    }
}
